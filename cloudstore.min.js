class CloudStore{constructor(t,e,s){this.server=e||"https://enjine.cloud/cloudstore",this.m_apiKey=t,this.m_maxRate=3e3,this.m_tlast=0,this.m_retry=!0,this.m_version=1.1,s&&(this.m_mediaPass=s.mediaPass,this.m_dataPass=s.dataPass)}rateCheck(){var t=+new Date;return!(t-this.m_tlast<this.m_maxRate)&&(this.m_tlast=t,!0)}async sendData(t,e){try{if(void 0===t)return Promise.reject("url or options not defined");return void 0!==e&&void 0===e.method&&(e.method="POST"),(await fetch(t,e)).json()}catch(t){return console.error(t),{error:"Error sending data!"}}}save(t,e,s,a){try{if(!this.rateCheck())return void setTimeout(()=>{this.save(t,e,s,a)},this.m_maxRate+500);const r={key:this.m_apiKey,file:t,options:null,id:"_data",value:e,password:a,dataPass:this.m_dataPass},i=this.server+"/store/save",o={body:JSON.stringify(r),headers:{"Content-type":"application/json; charset=UTF-8"}};this.sendData(i,o).then(t=>{s&&s(t)})}catch(t){console.error(t),s&&s({error:"Error saving data!"})}}merge(t,e,s,a){try{if(!this.rateCheck())return void setTimeout(()=>{this.merge(t,e,s,a)},this.m_maxRate+500);const r={key:this.m_apiKey,file:t,options:"merge",id:"_data",value:e,password:a,dataPass:this.m_dataPass},i=this.server+"/store/save",o={body:JSON.stringify(r),headers:{"Content-type":"application/json; charset=UTF-8"}};this.sendData(i,o).then(t=>{s&&s(t)})}catch(t){console.error(t),s&&s({error:"Error merging data!"})}}delete(t,e,s){try{if(!this.rateCheck())return void setTimeout(()=>{this.delete(t,e,s)},this.m_maxRate+500);const a={key:this.m_apiKey,file:t,options:"delete",id:"_data",value:null,password:s,dataPass:this.m_dataPass},r=this.server+"/store/save",i={body:JSON.stringify(a),headers:{"Content-type":"application/json; charset=UTF-8"}};this.sendData(r,i).then(t=>{e&&e(t)})}catch(t){console.error(t),e&&e({error:"Error deleting data!"})}}load(t,e,s){try{if(!this.rateCheck())return void setTimeout(()=>{this.load(t,e,s)},this.m_maxRate+500);var a={key:this.m_apiKey,file:t,options:null,id:"_data",password:s,dataPass:this.m_dataPass};const r=this.server+"/store/load",i={body:JSON.stringify(a),headers:{"Content-type":"application/json; charset=UTF-8"}};this.sendData(r,i).then(t=>{t.data=t.message||"",e&&e(t)})}catch(t){console.error(t),e&&e({error:"Error loading data!"})}}list(t,e){try{if(!this.rateCheck())return void setTimeout(()=>{this.list(t,e)},this.m_maxRate+500);t||(t="");var s={key:this.m_apiKey,file:t,options:"list",id:"_data",dataPass:this.m_dataPass};const a=this.server+"/store/load",r={body:JSON.stringify(s),headers:{"Content-type":"application/json; charset=UTF-8"}};this.sendData(a,r).then(t=>{t.data=t.message||"",e&&e(t)})}catch(t){console.error(t),e&&e({error:"Error listing data!"})}}upload(t,e,s,a,r){try{if(!this.rateCheck())return void setTimeout(()=>{this.upload(t,e,s,a,r)},this.m_maxRate+500);var i=new FormData;const o="string"==typeof t?this.b64toBlob(t,e,s):t;i.append("file",o),i.append("key",this.m_apiKey),i.append("password",r),i.append("mediaPass",this.m_mediaPass);const n=this.server+"/upload-2",h={body:i};this.sendData(n,h).then(t=>{a&&a(t)})}catch(t){console.error(t),a&&a({error:"Error uploading the file!"})}}b64toBlob(t,e="",s="",a=512){try{const r=atob(t),i=[];for(let t=0;t<r.length;t+=a){const e=r.slice(t,t+a),s=new Array(e.length);for(let t=0;t<e.length;t++)s[t]=e.charCodeAt(t);const o=new Uint8Array(s);i.push(o)}return new File(i,e,{type:s})}catch(t){return console.error(t),""}}}